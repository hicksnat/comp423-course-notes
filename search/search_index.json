{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Nate's Course Notes","text":"<p>This is my home page. I will use it to organize and share my course notes.</p>"},{"location":"tutorials/rust-setup/","title":"Setting up a dev container for Rust","text":"<ul> <li> <p>Primary author: Nate Hicks</p> </li> <li> <p>Reviewer: Bryson Hogsed</p> </li> </ul>"},{"location":"tutorials/rust-setup/#requirements","title":"Requirements","text":"<p>Make sure you have: 1. Docker 2. VSCode 3. Dev container extension for VSCode  </p>"},{"location":"tutorials/rust-setup/#making-your-directory-and-git-repository","title":"Making your directory and git repository","text":"<ol> <li>Open your terminal</li> <li>Create your directory: <code>mkdir &lt;directory-name&gt;</code> <code>cd &lt;directory-name&gt;</code></li> <li>Create your git repository <code>git init</code></li> </ol>"},{"location":"tutorials/rust-setup/#creating-your-dev-container","title":"Creating your dev container","text":"<ol> <li>Open VSCode</li> <li>Open the directory you just made</li> <li>Within your directory, create another directory named <code>.devcontainer</code></li> <li>Inside <code>.devcontainer</code>, create another file called <code>devcontainer.json</code> </li> <li>Copy and paste the following code into the <code>devcontainer.json</code> file: </li> </ol> <pre><code>{\n  \"name\": \"Rust Dev Container\",\n  \"image\": \"mcr.microsoft.com/devcontainers/rust:latest\",\n  \"features\": {\n    \"ghcr.io/devcontainers/features/docker-in-docker:1\": {}\n  },\n  \"postCreateCommand\": \"cargo init &amp;&amp; cargo build\",\n  \"customizations\": {\n    \"vscode\": {\n      \"settings\": {},\n      \"extensions\": [\n        \"rust-lang.rust-analyzer\"\n      ]\n    }\n  }\n}\n</code></pre>"},{"location":"tutorials/rust-setup/#reopen-your-work-in-a-container","title":"Reopen your work in a container","text":"<ol> <li>Press Ctrl + Shift + P (Cmd + Shift + P on Mac) and search for the option \"Reopen in Dev Container\" After clicking this option, your dev container should be all set up! Now let's run something basic in Rust  </li> <li>Check that you have a recent version of Rust. In the VSCode dev container terminal, run the command <code>rustc --version</code> The output should look something like <code>rustc 1.84.0 (13nd7h469 2025-01-07)</code>. If your version is significantly older than this, consider updating it.</li> </ol>"},{"location":"tutorials/rust-setup/#hello-world","title":"Hello world","text":"<ol> <li>If it does not already exist, create a new directory in your container called <code>src</code> </li> <li>Create a file within <code>src</code> named <code>main.rs</code></li> <li>Paste the following code into <code>main.rs</code> <code>fn main() {</code> <code>println!(\"Hello, COMP423!\");</code> <code>}</code> </li> <li>In the VSCode terminal, run the command <code>cargo build</code>. This essentially compiles your program</li> <li>Now, cd out of your src directory by running <code>cd ..</code></li> <li>Once you are in the folder that simply has the name of your project, you can run the command straight from there by running <code>./target/debug/&lt;project-name&gt;</code> in the VSCode terminal</li> <li>Alternatively, you can use the command <code>cargo run</code> to run your project, which essentially combines building and running the binary into one step. In general, <code>cargo run</code> is more efficienct, while the method in step 6 gives you more control and allows you to look over your built files/ binary.</li> </ol>"}]}